{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\Desktop\\\\notdeploy\\\\frontend\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n  const [alert, setAlert] = useState({\n    message: \"\",\n    type: \"\"\n  });\n\n  const fetchNotes = async () => {\n    const response = await fetch(`https://writenote.herokuapp.com/notes/fetchnotes`, {\n      method: 'GET',\n      headers: {\n        \"auth-token\": localStorage.getItem('token'),\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await response.json(); // console.log(json);\n\n    setNotes(json);\n  }; // Add a note\n  // TODO : API call\n\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`https://writenote.herokuapp.com/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        \"auth-token\": localStorage.getItem('token'),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n    showAlert(\"Note Added succesfully\", 'success');\n  }; // Delete a note\n\n\n  const deleteNote = async id => {\n    const response = await fetch(`https://writenote.herokuapp.com/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        \"auth-token\": localStorage.getItem('token'),\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    await response.json(); // console.log(json);\n    // console.log(\"deleting a note with id \"+ id);\n    // Logic to delete a note in front-end\n\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n    showAlert(\"Note Deleted succesfully\", 'success');\n  }; // Edit a note\n\n\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`https://writenote.herokuapp.com/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        \"auth-token\": localStorage.getItem('token'),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json); // Login to edit in client i.e, in front-end\n\n    let newNotes = JSON.parse(JSON.stringify(notes));\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n    showAlert(\"Note Updated succesfully\", 'success');\n  }; // Alert Function\n\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      deleteNote,\n      editNote,\n      fetchNotes,\n      showAlert,\n      alert\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"5tc3IETYs8u+eKt5BP2VGyLJY3w=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","NoteState","props","notesInitial","notes","setNotes","alert","setAlert","message","type","fetchNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","showAlert","deleteNote","id","newNotes","filter","_id","editNote","console","log","parse","index","length","element","setTimeout","children"],"sources":["C:/Users/LENOVO/OneDrive/Desktop/notdeploy/frontend/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const notesInitial = [];\r\n  const [notes, setNotes] = useState(notesInitial);\r\n  const [alert, setAlert] = useState({message:\"\", type:\"\"});\r\n  \r\n  const fetchNotes = async()=>{\r\n    const response = await fetch(`https://writenote.herokuapp.com/notes/fetchnotes`, {\r\n      method:'GET',\r\n      headers: {\r\n        \"auth-token\": localStorage.getItem('token'),\r\n        \"Content-Type\": \"application/json\"\r\n      } \r\n\r\n    });\r\n    const json = await response.json();\r\n    // console.log(json);\r\n    setNotes(json);\r\n  }\r\n\r\n  // Add a note\r\n  // TODO : API call\r\n  const addNote = async(title, description, tag) => {\r\n    const response = await fetch(`https://writenote.herokuapp.com/notes/addnote`, {\r\n      method:'POST',\r\n      headers: {\r\n        \"auth-token\": localStorage.getItem('token'),\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({title, description, tag})\r\n    })\r\n    const note = await response.json();\r\n   \r\n    setNotes(notes.concat(note));\r\n    showAlert(\"Note Added succesfully\", 'success')\r\n  };\r\n\r\n  // Delete a note\r\n  const deleteNote = async(id) => {\r\n    const response = await fetch(`https://writenote.herokuapp.com/notes/deletenote/${id}`,{\r\n      method:'DELETE',\r\n      headers: {\r\n        \"auth-token\": localStorage.getItem('token'),\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n    })\r\n    await response.json();\r\n    // console.log(json);\r\n\r\n    // console.log(\"deleting a note with id \"+ id);\r\n\r\n    // Logic to delete a note in front-end\r\n    const newNotes = notes.filter((note) => {\r\n      return note._id !== id;\r\n    });\r\n    setNotes(newNotes);\r\n    showAlert(\"Note Deleted succesfully\", 'success')\r\n    \r\n  };\r\n\r\n  // Edit a note\r\n  const editNote = async (id, title, description, tag) => {\r\n    const response = await fetch(`https://writenote.herokuapp.com/notes/updatenote/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"auth-token\": localStorage.getItem('token'),\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({title, description, tag})\r\n    });\r\n    const json = await response.json();\r\n    console.log(json);\r\n\r\n  // Login to edit in client i.e, in front-end\r\n  let newNotes = JSON.parse(JSON.stringify(notes));\r\n  for(let index = 0; index<newNotes.length;index++){\r\n    const element = newNotes[index];\r\n    if(element._id === id){\r\n      newNotes[index].title = title;\r\n      newNotes[index].description = description;\r\n      newNotes[index].tag = tag;\r\n      break;\r\n    }\r\n    \r\n  }\r\n  setNotes(newNotes);\r\n  showAlert(\"Note Updated succesfully\", 'success')\r\n  \r\n};\r\n\r\n\r\n// Alert Function\r\nconst showAlert = (message, type)=>{\r\n  setAlert({\r\n    message: message,\r\n    type: type\r\n  })\r\n  setTimeout(() => {\r\n    setAlert(null);\r\n  }, 2000);\r\n}\r\n\r\n  return (\r\n    <NoteContext.Provider\r\n      value={{ notes, setNotes, addNote, deleteNote, editNote, fetchNotes, showAlert, alert }}\r\n    >\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}